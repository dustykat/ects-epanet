{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this is a compute cell\n",
    "# The \"!\" symbol sends a system command to a shell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 1572\n",
      "drwxrwxr-x 11 sensei sensei   4096 Aug  4 09:44 .\n",
      "drwxrwxr-x  8 sensei sensei   4096 Jul 29 06:04 ..\n",
      "drwxrwxr-x  2 sensei sensei   4096 Aug  4 07:05 .ipynb_checkpoints\n",
      "-rw-rw-r--  1 sensei sensei  25879 Aug  4 09:44 ICTSummerSchool2023.ipynb\n",
      "-rw-rw-r--  1 sensei sensei   3732 Aug  4 09:43 Junk.rpt\n",
      "-rw-rw-r--  1 sensei sensei   6304 Jun 13 00:23 Net1.inp\n",
      "-rw-rw-r--  1 sensei sensei  46587 Jun 13 00:22 Net1.out\n",
      "-rw-rw-r--  1 sensei sensei  42849 Aug  4 09:04 Net1.rpt\n",
      "-rw-rw-r--  1 sensei sensei   6305 Jun 13 00:28 Net1g.inp\n",
      "-rw-rw-r--  1 sensei sensei  46674 Aug  3 09:39 Net1g.rpt\n",
      "drwxrwxr-x  2 sensei sensei   4096 Jul 28 19:24 __pycache__\n",
      "-rw-rw-r--  1 sensei sensei 387806 Jun 12 23:33 buildtools1of2.png\n",
      "-rw-rw-r--  1 sensei sensei 402767 Jun 12 23:33 buildtools2of2.png\n",
      "-rw-rw-r--  1 sensei sensei    169 Aug  4 07:44 enlkyr5b\n",
      "-rw-rw-r--  1 sensei sensei     69 Jul 28 18:44 ensYZnxU\n",
      "-rw-rw-r--  1 sensei sensei     69 Jul 28 18:41 enxPe9Sj\n",
      "-rw-rw-r--  1 sensei sensei  32610 Jul 28 19:24 epamodule.py\n",
      "-rw-rw-r--  1 sensei sensei   5227 Jun  8 17:22 epanet-rules.ipynb.bak\n",
      "-rw-rw-r--  1 sensei sensei    791 Jul 29 06:51 epanet-rulesAPI.ipynb\n",
      "-rw-rw-r--  1 sensei sensei  38843 Jul 30 16:24 epanet-rulesCLI.ipynb\n",
      "-rw-rw-r--  1 sensei sensei  33676 Jul 30 16:24 epanet-rulesGUI.ipynb\n",
      "-rw-rw-r--  1 sensei sensei    779 Jul 29 06:52 epanet-sensors.ipynb\n",
      "-rw-rw-r--  1 sensei sensei  16253 Aug  3 09:46 epanet-toolkit.ipynb\n",
      "drwxrwxr-x  3 sensei sensei   4096 Aug  4 08:58 ex1-cr\n",
      "drwxrwxr-x  3 sensei sensei   4096 Aug  3 09:44 ex1-tk\n",
      "drwxrwxr-x  2 sensei sensei   4096 Aug  1 05:59 ex11-tk\n",
      "drwxrwxr-x  3 sensei sensei   4096 Jul 29 06:31 ex2-tk\n",
      "drwxrwxr-x  3 sensei sensei   4096 Aug  4 07:46 ex3-tk\n",
      "drwxrwxr-x  3 sensei sensei   4096 Jul 29 10:31 ex4-tk\n",
      "drwxrwxr-x  3 sensei sensei   4096 Aug  4 08:52 ex5-tk\n",
      "-rw-rw-r--  1 sensei sensei  15189 Jun 12 23:26 example2.inp\n",
      "-rw-rw-r--  1 sensei sensei    572 Jun 13 00:02 example2.rpt\n",
      "-rwxr-xr-x  1 sensei sensei 400904 Jun 12 23:22 libepanet2.so\n"
     ]
    }
   ],
   "source": [
    "! ls -la"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Values\n",
      "Elevation J: 110.0 Pressure J: -30.371\n",
      "tolerance met 318\n",
      "318 Elevation J: 78.628 Pressure J: 1.0\n",
      "  Page 1                                    Fri Aug  4 09:44:55 2023\n",
      "\n",
      "  ******************************************************************\n",
      "  *                           E P A N E T                          *\n",
      "  *                   Hydraulic and Water Quality                  *\n",
      "  *                   Analysis for Pipe Networks                   *\n",
      "  *                         Version 2.2                            *\n",
      "  ******************************************************************\n",
      "  \n",
      "   \n",
      "      Input Data File ................... ./ex3-tk/EX3-inclass.inp\n",
      "      Number of Junctions................ 4\n",
      "      Number of Reservoirs............... 3\n",
      "      Number of Tanks ................... 0\n",
      "      Number of Pipes ................... 6\n",
      "      Number of Pumps ................... 0\n",
      "      Number of Valves .................. 0\n",
      "      Headloss Formula .................. Hazen-Williams\n",
      "      Nodal Demand Model ................ DDA\n",
      "      Hydraulic Timestep ................ 1.00 hrs\n",
      "      Hydraulic Accuracy ................ 0.001000\n",
      "      Status Check Frequency ............ 2\n",
      "      Maximum Trials Checked ............ 10\n",
      "      Damping Limit Threshold ........... 0.000000\n",
      "      Maximum Trials .................... 40\n",
      "      Quality Analysis .................. None\n",
      "      Specific Gravity .................. 1.00\n",
      "      Relative Kinematic Viscosity ...... 1.00\n",
      "      Relative Chemical Diffusivity ..... 1.00\n",
      "      Demand Multiplier ................. 1.00\n",
      "      Total Duration .................... 0.00 hrs\n",
      "      Reporting Criteria:\n",
      "         All Nodes\n",
      "         All Links\n",
      "   \n",
      "  Analysis begun Fri Aug  4 09:44:55 2023\n",
      "\n",
      "   \n",
      "  Hydraulic Status:\n",
      "  -----------------------------------------------------------------------\n",
      "     0:00:00: Balancing the network:\n",
      "\n",
      "              Trial  1: relative flow change = 10.124589\n",
      "              Trial  2: relative flow change = 1.170853\n",
      "              Trial  3: relative flow change = 1.161766\n",
      "              Trial  4: relative flow change = 1.124854\n",
      "              Trial  5: relative flow change = 0.990238\n",
      "              Trial  6: relative flow change = 0.644312\n",
      "              Trial  7: relative flow change = 0.226544\n",
      "              Trial  8: relative flow change = 0.048396\n",
      "              Trial  9: relative flow change = 0.002497\n",
      "              Trial 10: relative flow change = 0.000007\n",
      "                        maximum  flow change = 0.0000 for Link PBJ\n",
      "                        maximum  head error  = 0.0000 for Link PBJ\n",
      "\n",
      "     0:00:00: Balanced after 10 trials\n",
      "     0:00:00: Reservoir A is emptying\n",
      "     0:00:00: Reservoir B is emptying\n",
      "     0:00:00: Reservoir C is filling\n",
      "   \n",
      "   \n",
      "  Node Results:\n",
      "  ----------------------------------------------\n",
      "                     Demand      Head  Pressure\n",
      "  Node                  L/s         m         m\n",
      "  ----------------------------------------------\n",
      "  NodeA                0.00    100.00    100.00\n",
      "  NodeB                0.00     80.00     80.00\n",
      "  NodeC                0.00     60.00     60.00\n",
      "  J                    0.00     79.63      1.00\n",
      "  A                   -2.35    100.00     -0.00  Reservoir\n",
      "  B                   -0.29     80.00      0.00  Reservoir\n",
      "  C                    2.64     60.00     -0.00  Reservoir\n",
      "   \n",
      "   \n",
      "  Link Results:\n",
      "  ----------------------------------------------\n",
      "                       Flow  Velocity  Headloss\n",
      "  Link                  L/s       m/s    /1000m\n",
      "  ----------------------------------------------\n",
      "  PAJ                  2.35      0.00     22.63\n",
      "  PBJ                  0.29      0.00      0.46\n",
      "  PJC                  2.64      0.00     28.04\n",
      "  4                    2.35      0.00      0.14\n",
      "  5                    0.29      0.00      0.00\n",
      "  6                   -2.64      0.00      0.18\n",
      "   \n",
      "  Analysis ended Fri Aug  4 09:44:55 2023\n"
     ]
    }
   ],
   "source": [
    "import epamodule as em  # import the package\n",
    "#Open the EPANET toolkit & hydraulics solver   \n",
    "em.ENopen(\"./ex3-tk/EX3-tk.inp\", \"Junk.rpt\") # The modified file\n",
    "em.ENopenH()\n",
    "nodej = em.ENgetnodeindex(\"J\") # Get the index of Node J in the internal database\n",
    "elevj = em.ENgetnodevalue(nodej,0)\n",
    "# wrap this into a little search loop\n",
    "em.ENsetnodevalue(nodej, 0, elevj) # set nodej to elevation (code 0) of 100.0\n",
    "em.ENsolveH()\n",
    "presj = em.ENgetnodevalue(nodej,11)\n",
    "print(\"Initial Values\")\n",
    "print(\"Elevation J: \" + str(round(elevj,3)) + \" Pressure J: \" + str(round(presj,3)) )\n",
    "# Lets do a crude search\n",
    "tol = 1e-3\n",
    "targetp = 1.0\n",
    "for iter in range(400):\n",
    "    if abs(presj-targetp) <= tol:\n",
    "        print(\"tolerance met\",iter)\n",
    "        break\n",
    "    if presj < targetp :\n",
    "        elevj = elevj*0.99\n",
    "    if presj > targetp :\n",
    "        elevj = elevj*1.11\n",
    "    em.ENsetnodevalue(nodej, 0, elevj) # set nodej to elevation (code 0) of 100.0 \n",
    "    em.ENsaveinpfile(\"./ex3-tk/EX3-inclass.inp\") #overwrite the input file\n",
    "    em.ENsolveH()\n",
    "    presj = em.ENgetnodevalue(nodej,11)\n",
    "print(str(iter) + \" Elevation J: \" + str(round(elevj,3)) + \" Pressure J: \" + str(round(presj,3)) )\n",
    "# end search\n",
    "em.ENsaveH() # need to save to a binary file before write\n",
    "em.ENcloseH()\n",
    "em.ENopenQ()\n",
    "em.ENsolveQ()\n",
    "em.ENreport() # now write report\n",
    "# Close hydraulics solver & toolkit */\n",
    "em.ENclose()\n",
    "#! cat Junk.rpt\n",
    "em.ENepanet(\"./ex3-tk/EX3-inclass.inp\", \"Junk.rpt\") # The modified file\n",
    "! cat Junk.rpt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Page 1                                    Fri Aug  4 09:44:55 2023\n",
      "\n",
      "  ******************************************************************\n",
      "  *                           E P A N E T                          *\n",
      "  *                   Hydraulic and Water Quality                  *\n",
      "  *                   Analysis for Pipe Networks                   *\n",
      "  *                         Version 2.2                            *\n",
      "  ******************************************************************\n",
      "  \n",
      "   \n",
      "      Input Data File ................... ./ex4-tk/EX4-tk.inp\n",
      "      Number of Junctions................ 4\n",
      "      Number of Reservoirs............... 2\n",
      "      Number of Tanks ................... 0\n",
      "      Number of Pipes ................... 6\n",
      "      Number of Pumps ................... 0\n",
      "      Number of Valves .................. 0\n",
      "      Headloss Formula .................. Darcy-Weisbach\n",
      "      Nodal Demand Model ................ DDA\n",
      "      Hydraulic Timestep ................ 1.00 hrs\n",
      "      Hydraulic Accuracy ................ 0.001000\n",
      "      Status Check Frequency ............ 2\n",
      "      Maximum Trials Checked ............ 10\n",
      "      Damping Limit Threshold ........... 0.000000\n",
      "      Maximum Trials .................... 40\n",
      "      Quality Analysis .................. None\n",
      "      Specific Gravity .................. 1.00\n",
      "      Relative Kinematic Viscosity ...... 1.00\n",
      "      Relative Chemical Diffusivity ..... 1.00\n",
      "      Demand Multiplier ................. 1.00\n",
      "      Total Duration .................... 0.00 hrs\n",
      "      Reporting Criteria:\n",
      "         All Nodes\n",
      "         All Links\n",
      "   \n",
      "  Analysis begun Fri Aug  4 09:44:55 2023\n",
      "\n",
      "   \n",
      "  Hydraulic Status:\n",
      "  -----------------------------------------------------------------------\n",
      "     0:00:00: Balanced after 5 trials\n",
      "     0:00:00: Reservoir 1 is emptying\n",
      "     0:00:00: Reservoir 2 is filling\n",
      "   \n",
      "   \n",
      "  Node Results:\n",
      "  ----------------------------------------------\n",
      "                     Demand      Head  Pressure\n",
      "  Node                  L/s         m         m\n",
      "  ----------------------------------------------\n",
      "  3                    0.00     75.00     25.00\n",
      "  4                 -200.00     79.97     29.97\n",
      "  5                    0.00     70.00     20.00\n",
      "  6                  200.00     69.90     19.90\n",
      "  1                 -121.21     75.00     -0.00  Reservoir\n",
      "  2                  121.21     70.00      0.00  Reservoir\n",
      "   \n",
      "   \n",
      "  Link Results:\n",
      "  ----------------------------------------------\n",
      "                       Flow  Velocity  Headloss\n",
      "  Link                  L/s       m/s    /1000m\n",
      "  ----------------------------------------------\n",
      "  1                  121.21      0.19      0.04\n",
      "  2                 -121.21      0.19      0.04\n",
      "  3                  -63.45      1.29      7.10\n",
      "  4                  136.55      1.93     12.47\n",
      "  5                   15.34      0.16      0.09\n",
      "  6                  184.66      1.47      5.10\n",
      "   \n",
      "  Analysis ended Fri Aug  4 09:44:55 2023\n"
     ]
    }
   ],
   "source": [
    "import epamodule as em  # import the package\n",
    "#Open the EPANET toolkit & hydraulics solver   \n",
    "em.ENopen(\"./ex4-tk/EX4-JB.inp\", \"./ex4-tk/EX4-tk.rpt\")\n",
    "# build report command strings Keyword  Action see user manual\n",
    "command0 = \"Status     Yes\"\n",
    "command1 = \"Summary            \tYes\"\n",
    "command2 = \"Nodes            \tALL\"\n",
    "command3 = \"Links            \tALL\"\n",
    "em.ENsetstatusreport(2) # full status report\n",
    "em.ENsetreport(command0)\n",
    "em.ENsetreport(command1)\n",
    "em.ENsetreport(command2)\n",
    "em.ENsetreport(command3)\n",
    "em.ENsaveinpfile(\"./ex4-tk/EX4-tk.inp\") #overwrite the input file\n",
    "em.ENclose()\n",
    "# now run from the new file\n",
    "em.ENopen(\"./ex4-tk/EX4-tk.inp\", \"./ex4-tk/EX4-tk.rpt\")\n",
    "em.ENopenH()\n",
    "em.ENsolveH()\n",
    "em.ENsaveH() # need to save to a binary file before write\n",
    "em.ENcloseH()\n",
    "em.ENopenQ()\n",
    "em.ENsolveQ()\n",
    "em.ENreport() # now write report\n",
    "# Close hydraulics solver & toolkit */\n",
    "em.ENclose()\n",
    "\n",
    "! cat ./ex4-tk/EX4-tk.rpt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " System Topology is:\n",
      "\n",
      " Node count: 6\n",
      " Link count: 6\n",
      " FGN count : 2\n",
      "Link :1 Diameter(mm) : 900.0\n",
      "Link :2 Diameter(mm) : 900.0\n",
      "Link :3 Diameter(mm) : 250.0\n",
      "Link :4 Diameter(mm) : 300.0\n",
      "Link :5 Diameter(mm) : 350.0\n",
      "Link :6 Diameter(mm) : 400.0\n",
      "Link :1 Flow : 0.0004\n",
      "Link :2 Flow : 0.0004\n",
      "Link :3 Flow : 4.973\n",
      "Link :4 Flow : 9.9723\n",
      "Link :5 Flow : 0.1026\n",
      "Link :6 Flow : 5.1018\n",
      "Total head losses : 20.15\n",
      "Change diameter link 4\n",
      "Link :1 Diameter(mm) : 900.0\n",
      "Link :2 Diameter(mm) : 900.0\n",
      "Link :3 Diameter(mm) : 250.0\n",
      "Link :4 Diameter(mm) : 100.0\n",
      "Link :5 Diameter(mm) : 350.0\n",
      "Link :6 Diameter(mm) : 400.0\n",
      "Link :1 Flow : 0.0\n",
      "Link :2 Flow : 0.0\n",
      "Link :3 Flow : 40.4552\n",
      "Link :4 Flow : 45.4552\n",
      "Link :5 Flow : 0.1024\n",
      "Link :6 Flow : 5.1024\n",
      "Total head losses : 91.115\n"
     ]
    }
   ],
   "source": [
    "#ENgetcount(countcode)\n",
    "\n",
    "import epamodule as em  # import the package\n",
    "#Open the EPANET toolkit & hydraulics solver   \n",
    "em.ENopen(\"./ex4-tk/EX4-tk.inp\", \"./ex4-tk/EX4-tk.rpt\")\n",
    "howmanynodes = em.ENgetcount(0) # Code 0 == nodes\n",
    "howmanylinks = em.ENgetcount(2) # Code 2 == links\n",
    "howmanyFGN   = em.ENgetcount(1) # Code 1 == Tanks/Reservoirs\n",
    "print(\" System Topology is:\\n\")\n",
    "print(\" Node count: \" + str(howmanynodes))\n",
    "print(\" Link count: \" + str(howmanylinks))\n",
    "print(\" FGN count : \" + str(howmanyFGN))\n",
    "diameter = [] # create empty list\n",
    "for ilink in range(howmanylinks):\n",
    "    diameter.append(em.ENgetlinkvalue(ilink+1,0)) # Code 0 == diameter\n",
    "    print(\"Link :\" + str(ilink+1) + \" Diameter(mm) : \" + str(diameter[ilink]))\n",
    "em.ENopenH()\n",
    "em.ENsolveH()\n",
    "hloss = [] # create empty list\n",
    "accloss = 0.\n",
    "for ilink in range(howmanylinks):\n",
    "    hloss.append(em.ENgetlinkvalue(ilink+1,10)) # Code 10 == head loss\n",
    "    print(\"Link :\" + str(ilink+1) + \" Flow : \" + str(round(hloss[ilink],4)))\n",
    "for ilink in range(howmanylinks):\n",
    "    accloss = accloss + abs(hloss[ilink])\n",
    "print(\"Total head losses :\",round(accloss,3))\n",
    "print(\"Change diameter link 4\")\n",
    "em.ENsetlinkvalue(4, 0, 100)\n",
    "diameter = [] # create empty list\n",
    "for ilink in range(howmanylinks):\n",
    "    diameter.append(em.ENgetlinkvalue(ilink+1,0)) # Code 0 == diameter\n",
    "    print(\"Link :\" + str(ilink+1) + \" Diameter(mm) : \" + str(diameter[ilink]))\n",
    "em.ENsolveH()\n",
    "nhloss = [] # create empty list\n",
    "for ilink in range(howmanylinks):\n",
    "    nhloss.append(em.ENgetlinkvalue(ilink+1,10)) # Code 10 == head loss\n",
    "    print(\"Link :\" + str(ilink+1) + \" Flow : \" + str(round(nhloss[ilink],4)))\n",
    "accloss = 0.0\n",
    "for ilink in range(howmanylinks):\n",
    "    accloss = accloss + abs(nhloss[ilink])\n",
    "print(\"Total head losses :\",round(accloss,3))\n",
    "em.ENsaveH() # need to save to a binary file before write\n",
    "em.ENcloseH()\n",
    "em.ENopenQ()\n",
    "em.ENsolveQ()\n",
    "em.ENreport() # now write report\n",
    "# Close hydraulics solver & toolkit */\n",
    "em.ENclose()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Page 1                                    Fri Aug  4 09:44:56 2023\n",
      "\n",
      "  ******************************************************************\n",
      "  *                           E P A N E T                          *\n",
      "  *                   Hydraulic and Water Quality                  *\n",
      "  *                   Analysis for Pipe Networks                   *\n",
      "  *                         Version 2.2                            *\n",
      "  ******************************************************************\n",
      "  \n",
      "  Analysis begun Fri Aug  4 09:44:56 2023\n",
      "\n",
      "  Analysis ended Fri Aug  4 09:44:56 2023\n"
     ]
    }
   ],
   "source": [
    "import epamodule as em  # import the package\n",
    "# Run a complete simulation. input file must already exist\n",
    "em.ENepanet(\"./ex5-tk/EX5-tk.inp\", \"./ex5-tk/EX5-tk.rpt\") \n",
    "# Print the output report (it will be sparse)\n",
    "!cat ./ex5-tk/EX5-tk.rpt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Page 1                                    Fri Aug  4 09:44:56 2023\n",
      "\n",
      "  ******************************************************************\n",
      "  *                           E P A N E T                          *\n",
      "  *                   Hydraulic and Water Quality                  *\n",
      "  *                   Analysis for Pipe Networks                   *\n",
      "  *                         Version 2.2                            *\n",
      "  ******************************************************************\n",
      "  \n",
      "   \n",
      "      Input Data File ................... ./ex5-tk/EX5-tkmod.inp\n",
      "      Number of Junctions................ 2\n",
      "      Number of Reservoirs............... 2\n",
      "      Number of Tanks ................... 0\n",
      "      Number of Pipes ................... 2\n",
      "      Number of Pumps ................... 1\n",
      "      Number of Valves .................. 0\n",
      "      Headloss Formula .................. Darcy-Weisbach\n",
      "      Nodal Demand Model ................ DDA\n",
      "      Hydraulic Timestep ................ 1.00 hrs\n",
      "      Hydraulic Accuracy ................ 0.001000\n",
      "      Status Check Frequency ............ 2\n",
      "      Maximum Trials Checked ............ 10\n",
      "      Damping Limit Threshold ........... 0.000000\n",
      "      Maximum Trials .................... 40\n",
      "      Quality Analysis .................. None\n",
      "      Specific Gravity .................. 1.00\n",
      "      Relative Kinematic Viscosity ...... 1.00\n",
      "      Relative Chemical Diffusivity ..... 1.00\n",
      "      Demand Multiplier ................. 1.00\n",
      "      Total Duration .................... 0.00 hrs\n",
      "      Reporting Criteria:\n",
      "         All Nodes\n",
      "         All Links\n",
      "   \n",
      "  Analysis begun Fri Aug  4 09:44:56 2023\n",
      "\n",
      "   \n",
      "  Hydraulic Status:\n",
      "  -----------------------------------------------------------------------\n",
      "     0:00:00: Balanced after 6 trials\n",
      "     0:00:00: Reservoir 1 is emptying\n",
      "     0:00:00: Reservoir 2 is filling\n",
      "   \n",
      "   \n",
      "  Node Results:\n",
      "  ----------------------------------------------\n",
      "                     Demand      Head  Pressure\n",
      "  Node                  L/s         m         m\n",
      "  ----------------------------------------------\n",
      "  3                    0.00      9.94      9.94\n",
      "  4                    0.00     21.41     21.41\n",
      "  1                   -8.01     10.00      0.00  Reservoir\n",
      "  2                    8.01     20.00      0.00  Reservoir\n",
      "   \n",
      "   \n",
      "  Link Results:\n",
      "  ----------------------------------------------\n",
      "                       Flow  Velocity  Headloss\n",
      "  Link                  L/s       m/s    /1000m\n",
      "  ----------------------------------------------\n",
      "  1                    8.01      1.02     14.08\n",
      "  2                    8.01      1.02     14.08\n",
      "  3                    8.01      0.00    -11.46  Pump\n",
      "   \n",
      "  Analysis ended Fri Aug  4 09:44:56 2023\n"
     ]
    }
   ],
   "source": [
    "# one possible solution\n",
    "import epamodule as em  # import the package\n",
    "#Open the EPANET toolkit & hydraulics solver   \n",
    "#em.ENopen(\"./ex5-tk/EX5-tkmod.inp\", \"./ex5-tk/EX5-tk.rpt\")\n",
    "# build report command strings Keyword  Action see user manual\n",
    "command0 = \"Status     Yes\"\n",
    "command1 = \"Summary            \tYes\"\n",
    "command2 = \"Nodes            \tALL\"\n",
    "command3 = \"Links            \tALL\"\n",
    "#em.ENsetstatusreport(2) # full status report\n",
    "#em.ENsetreport(command0)\n",
    "#em.ENsetreport(command1)\n",
    "#em.ENsetreport(command2)\n",
    "#em.ENsetreport(command3)\n",
    "#em.ENsaveinpfile(\"./ex5-tk/EX5-tkmod.inp\") #overwrite the input file\n",
    "#em.ENclose()\n",
    "# now run from the new file\n",
    "em.ENepanet(\"./ex5-tk/EX5-tkmod.inp\", \"./ex5-tk/EX5-tkmod.rpt\")\n",
    "! cat ./ex5-tk/EX5-tkmod.rpt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 13\n",
      "(1, 13, 0.0, 11, 140.0)\n",
      "  Page 1                                    Fri Aug  4 09:53:39 2023\n",
      "\n",
      "  ******************************************************************\n",
      "  *                           E P A N E T                          *\n",
      "  *                   Hydraulic and Water Quality                  *\n",
      "  *                   Analysis for Pipe Networks                   *\n",
      "  *                         Version 2.2                            *\n",
      "  ******************************************************************\n",
      "  \n",
      "   EPANET Example Network 1\n",
      "  A simple example of modeling chlorine decay. Both bulk and\n",
      "  wall reactions are included. \n",
      "   \n",
      "      Input Data File ................... ./ex1-cr/Net1-tk.inp\n",
      "      Number of Junctions................ 9\n",
      "      Number of Reservoirs............... 1\n",
      "      Number of Tanks ................... 1\n",
      "      Number of Pipes ................... 12\n",
      "      Number of Pumps ................... 1\n",
      "      Number of Valves .................. 0\n",
      "      Headloss Formula .................. Hazen-Williams\n",
      "      Nodal Demand Model ................ DDA\n",
      "      Hydraulic Timestep ................ 1.00 hrs\n",
      "      Hydraulic Accuracy ................ 0.001000\n",
      "      Status Check Frequency ............ 2\n",
      "      Maximum Trials Checked ............ 10\n",
      "      Damping Limit Threshold ........... 0.000000\n",
      "      Maximum Trials .................... 40\n",
      "      Quality Analysis .................. Chlorine\n",
      "      Water Quality Time Step ........... 5.00 min\n",
      "      Water Quality Tolerance ........... 0.01 mg/L\n",
      "      Specific Gravity .................. 1.00\n",
      "      Relative Kinematic Viscosity ...... 1.00\n",
      "      Relative Chemical Diffusivity ..... 1.00\n",
      "      Demand Multiplier ................. 1.00\n",
      "      Total Duration .................... 24.00 hrs\n",
      "      Reporting Criteria:\n",
      "         All Nodes\n",
      "         All Links\n",
      "   \n",
      "  Analysis begun Fri Aug  4 09:53:39 2023\n",
      "\n",
      "   \n",
      "  Hydraulic Status:\n",
      "  -----------------------------------------------------------------------\n",
      "     0:00:00: Balanced after 4 trials\n",
      "     0:00:00: Reservoir 9 is emptying\n",
      "     0:00:00: Tank 2 is filling at 120.00 ft\n",
      "   \n",
      "     1:00:00: Balanced after 2 trials\n",
      "   \n",
      "     2:00:00: Balanced after 3 trials\n",
      "   \n",
      "     3:00:00: Balanced after 2 trials\n",
      "   \n",
      "     4:00:00: Balanced after 3 trials\n",
      "   \n",
      "     5:00:00: Balanced after 2 trials\n",
      "   \n",
      "     6:00:00: Balanced after 2 trials\n",
      "   \n",
      "     7:00:00: Balanced after 1 trials\n",
      "   \n",
      "     8:00:00: Balanced after 2 trials\n",
      "   \n",
      "     9:00:00: Balanced after 2 trials\n",
      "   \n",
      "    10:00:00: Balanced after 2 trials\n",
      "   \n",
      "    11:00:00: Balanced after 2 trials\n",
      "   \n",
      "    12:00:00: Balanced after 3 trials\n",
      "   \n",
      "    12:32:34: Pump 9 changed by Tank 2 control\n",
      "    12:32:34: Balanced after 4 trials\n",
      "    12:32:34: Reservoir 9 is closed\n",
      "    12:32:34: Tank 2 is emptying at 140.00 ft\n",
      "    12:32:34: Pump 9 changed from open to closed\n",
      "   \n",
      "    13:00:00: Balanced after 1 trials\n",
      "   \n",
      "    14:00:00: Balanced after 2 trials\n",
      "   \n",
      "    15:00:00: Balanced after 1 trials\n",
      "   \n",
      "    16:00:00: Balanced after 2 trials\n",
      "   \n",
      "    17:00:00: Balanced after 1 trials\n",
      "   \n",
      "    18:00:00: Balanced after 2 trials\n",
      "   \n",
      "    19:00:00: Balanced after 1 trials\n",
      "   \n",
      "    20:00:00: Balanced after 2 trials\n",
      "   \n",
      "    21:00:00: Balanced after 1 trials\n",
      "   \n",
      "    22:00:00: Balanced after 2 trials\n",
      "   \n",
      "    22:41:30: Pump 9 changed by Tank 2 control\n",
      "    22:41:30: Balanced after 15 trials\n",
      "    22:41:30: Reservoir 9 is emptying\n",
      "    22:41:30: Tank 2 is filling at 110.00 ft\n",
      "    22:41:30: Pump 9 changed from closed to open\n",
      "   \n",
      "    23:00:00: Balanced after 2 trials\n",
      "   \n",
      "    24:00:00: Balanced after 3 trials\n",
      "   \n",
      "  Water Quality Mass Balance (mg)\n",
      "  ================================\n",
      "  Initial Mass:       7.47582e+06\n",
      "  Mass Inflow:        5.73534e+06\n",
      "  Mass Outflow:       3.22693e+06\n",
      "  Mass Reacted:       5.27198e+06\n",
      "  Final Mass:         4.71226e+06\n",
      "  Mass Ratio:         1.00000\n",
      "  ================================\n",
      "\n",
      "  Analysis ended Fri Aug  4 09:53:39 2023\n"
     ]
    }
   ],
   "source": [
    "## simple rules\n",
    "import epamodule as em  # import the package\n",
    "#Open the EPANET toolkit & hydraulics solver   \n",
    "em.ENopen(\"./ex1-cr/Net1.inp\", \"./ex1-cr/Net1-tk.rpt\")\n",
    "# build report command strings Keyword  Action see user manual\n",
    "command0 = \"Status     Yes\"\n",
    "command1 = \"Summary            \tYes\"\n",
    "command2 = \"Nodes            \tALL\"\n",
    "command3 = \"Links            \tALL\"\n",
    "#em.ENsetstatusreport(2) # full status report\n",
    "em.ENsetreport(command0)\n",
    "em.ENsetreport(command1)\n",
    "em.ENsetreport(command2)\n",
    "em.ENsetreport(command3)\n",
    "em.ENsaveinpfile(\"./ex1-cr/Net1-tk.inp\") #overwrite the input file\n",
    "nodej = em.ENgetnodeindex(\"2\")\n",
    "linkp = em.ENgetlinkindex(\"9\")\n",
    "print(nodej,linkp)\n",
    "outstr = em.ENgetcontrol(2)\n",
    "print(outstr)\n",
    "em.ENclose()\n",
    "# now run from the new file\n",
    "# now run from the new file\n",
    "em.ENopen(\"./ex1-cr/Net1-tk.inp\", \"./ex1-cr/Net1-tk.rpt\")\n",
    "em.ENopenH()\n",
    "em.ENsolveH()\n",
    "em.ENsaveH() # need to save to a binary file before write\n",
    "em.ENcloseH()\n",
    "em.ENopenQ()\n",
    "em.ENsolveQ()\n",
    "em.ENreport() # now write report\n",
    "# Close hydraulics solver & toolkit */\n",
    "em.ENclose()\n",
    "! cat ./ex1-cr/Net1-tk.rpt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
